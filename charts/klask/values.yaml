# Default values for klask.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

image:
  repository: ghcr.io
  pullPolicy: IfNotPresent
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext: {}

securityContext: {}

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
  hosts:
    - host: klask.local
      paths:
        - path: /
          pathType: Prefix
  tls: []

resources: {}

livenessProbe:
  httpGet:
    path: /
    port: http
readinessProbe:
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

volumes: []
volumeMounts: []

nodeSelector: {}
tolerations: []
affinity: {}

# Backend configuration
backend:
  enabled: true
  image:
    repository: ghcr.io/klask-io/klask-backend
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 3000
    targetPort: 3000
  
  env:
    - name: DATABASE_URL
      value: "postgresql://klask:klask@klask-postgresql:5432/klask"
    - name: RUST_LOG
      value: "info"
  
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 500m
      memory: 512Mi
  
  livenessProbe:
    httpGet:
      path: /api/status
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /api/status
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5

# Frontend configuration
frontend:
  enabled: true
  image:
    repository: ghcr.io/klask-io/klask-frontend
    tag: latest
    pullPolicy: IfNotPresent
  
  service:
    type: ClusterIP
    port: 8080
    targetPort: 8080
  
  env:
    - name: VITE_API_URL
      value: "http://klask-backend:3000"
  
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi
  
  livenessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
  
  readinessProbe:
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5

# PostgreSQL configuration
postgresql:
  enabled: true
  auth:
    postgresPassword: "postgres"
    username: "klask"
    password: "klask"
    database: "klask"
  image:
    repository: bitnamisecure/postgresql
    tag: latest
  primary:
    persistence:
      enabled: true
      size: 8Gi
    
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi
