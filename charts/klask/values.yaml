# Default values for klask.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

## @section Global parameters
## Global Docker image parameters
## Please, note that this will override the image parameters, including dependencies, configured to use the global value
## Current available global Docker image parameters: imageRegistry, imagePullSecrets

## @param replicaCount Number of Klask replicas to deploy
## Note: For production, set to 2 or more for high availability
replicaCount: 1

## @param imagePullSecrets Specify docker-registry secrets
## Example:
## imagePullSecrets:
##   - myRegistryKeySecretName
imagePullSecrets: []

## @param nameOverride String to partially override klask.fullname
nameOverride: ""

## @param fullnameOverride String to fully override klask.fullname
fullnameOverride: ""

## @section ServiceAccount parameters

serviceAccount:
  ## @param serviceAccount.create Specifies whether a ServiceAccount should be created
  create: true
  ## @param serviceAccount.automount Automatically mount a ServiceAccount's API credentials?
  automount: true
  ## @param serviceAccount.annotations Annotations to add to the service account
  annotations: {}
  ## @param serviceAccount.name The name of the ServiceAccount to use.
  ## If not set and create is true, a name is generated using the fullname template
  name: ""

## @section Security parameters

## @param podAnnotations Annotations for Klask pods
podAnnotations: {}

## @param podLabels Extra labels for Klask pods
podLabels: {}

## @param podSecurityContext Configure Pod security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-pod
podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  fsGroup: 1000
  seccompProfile:
    type: RuntimeDefault

## @param securityContext Configure Container security context
## ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/#set-the-security-context-for-a-container
securityContext:
  allowPrivilegeEscalation: false
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  runAsUser: 1000
  capabilities:
    drop:
      - ALL

## @section Ingress parameters

ingress:
  ## @param ingress.enabled Enable ingress record generation for Klask
  enabled: false
  ## @param ingress.className IngressClass that will be used to implement the Ingress (Kubernetes 1.18+)
  ## This is supported in Kubernetes 1.18+ and required if you have more than one IngressClass marked as the default for your cluster.
  className: "nginx"
  ## @param ingress.annotations Additional annotations for the Ingress resource
  ## For cert-manager with Let's Encrypt:
  ## cert-manager.io/cluster-issuer: "letsencrypt-prod"
  ## For nginx ingress with TLS redirect:
  ## nginx.ingress.kubernetes.io/ssl-redirect: "true"
  ## nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
  ## For CORS:
  ## nginx.ingress.kubernetes.io/enable-cors: "true"
  ## nginx.ingress.kubernetes.io/cors-allow-origin: "https://klask.example.com"
  annotations: {}
    # cert-manager.io/cluster-issuer: "letsencrypt-prod"
    # nginx.ingress.kubernetes.io/ssl-redirect: "true"
  ## @param ingress.hosts An array of host configurations for the Ingress
  hosts:
    - host: klask.local
      paths:
        - path: /
          pathType: Prefix
  ## @param ingress.tls TLS configuration for the Ingress
  tls: []
  #  - secretName: klask-tls
  #    hosts:
  #      - klask.local

## @section High Availability parameters

## @param autoscaling Horizontal Pod Autoscaler configuration
autoscaling:
  ## @param autoscaling.enabled Enable Horizontal Pod Autoscaler
  enabled: false
  ## @param autoscaling.minReplicas Minimum number of Klask replicas
  minReplicas: 1
  ## @param autoscaling.maxReplicas Maximum number of Klask replicas
  maxReplicas: 1
  ## @param autoscaling.metrics Metrics configuration for HPA
  metrics:
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 80
    - type: Resource
      resource:
        name: memory
        target:
          type: Utilization
          averageUtilization: 80
  ## @param autoscaling.behavior HPA behavior configuration
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
        - type: Percent
          value: 50
          periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
        - type: Percent
          value: 100
          periodSeconds: 15

## @param podDisruptionBudget Pod Disruption Budget configuration
podDisruptionBudget:
  ## @param podDisruptionBudget.enabled Enable PodDisruptionBudget
  enabled: true
  ## Backend PDB
  backend:
    ## @param podDisruptionBudget.backend.minAvailable Minimum available backend pods
    minAvailable: 1
    ## @param podDisruptionBudget.backend.maxUnavailable Maximum unavailable backend pods (use either minAvailable or maxUnavailable)
    maxUnavailable: null
  ## Frontend PDB
  frontend:
    ## @param podDisruptionBudget.frontend.minAvailable Minimum available frontend pods
    minAvailable: 1
    ## @param podDisruptionBudget.frontend.maxUnavailable Maximum unavailable frontend pods
    maxUnavailable: null

## @param affinity Affinity for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
affinity: {}
  # podAntiAffinity:
  #   preferredDuringSchedulingIgnoredDuringExecution:
  #     - weight: 100
  #       podAffinityTerm:
  #         labelSelector:
  #           matchLabels:
  #             app.kubernetes.io/name: klask
  #         topologyKey: kubernetes.io/hostname

## @param nodeSelector Node labels for pod assignment
## ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
nodeSelector: {}

## @param tolerations Tolerations for pod assignment
## ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

## @param volumes Additional volumes on the output Deployment definition
volumes: []

## @param volumeMounts Additional volumeMounts on the output Deployment definition
volumeMounts: []

## @section Backend parameters

backend:
  ## @param backend.enabled Enable backend deployment
  enabled: true

  ## @param backend.image Backend image configuration
  image:
    ## @param backend.image.repository Backend image repository
    repository: ghcr.io/klask-io/klask-backend
    ## @param backend.image.tag Backend image tag (immutable tags are recommended)
    tag: "v2.1.0"
    ## @param backend.image.pullPolicy Backend image pull policy
    pullPolicy: IfNotPresent

  ## @param backend.existingSecret Name of existing secret containing backend credentials
  ## If not specified, a secret will be created
  existingSecret: ""

  ## @param backend.secrets Additional secrets to store in backend secret
  ## Example:
  ## secrets:
  ##   API_KEY: "my-secret-api-key"
  secrets: {}

  ## @param backend.config Backend configuration (non-sensitive)
  config:
    ## @param backend.config.rustLog Rust log level
    rustLog: "error,klask=info"
    ## @param backend.config.logFormat Log format (json or text)
    logFormat: "json"
    ## @param backend.config.extra Additional configuration variables
    extra: {}

  ## @param backend.env Backend environment variables (for backward compatibility)
  env:
    ## Database configuration
    database:
      ## @param backend.env.database.url External database URL (leave empty to use embedded PostgreSQL)
      ## Example: "postgresql://user:pass@external-db:5432/klask"
      url: ""
    customVars: {}

  ## @param backend.service Backend service configuration
  service:
    ## @param backend.service.type Backend service type
    type: ClusterIP
    ## @param backend.service.port Backend service port
    port: 3000
    ## @param backend.service.targetPort Backend container port
    targetPort: 3000

  ## @param backend.resources Backend resource requests and limits
  ## Example:
  ## resources:
  ##   limits:
  ##     cpu: 1000m
  ##     memory: 1Gi
  ##   requests:
  ##     cpu: 500m
  ##     memory: 512Mi
  resources:
    limits:
      memory: 1Gi
    requests:
      cpu: 50m
      memory: 512Mi

  ## @param backend.livenessProbe Backend liveness probe configuration
  livenessProbe:
    enabled: true
    httpGet:
      path: /api/status
      port: 3000
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  ## @param backend.readinessProbe Backend readiness probe configuration
  readinessProbe:
    enabled: true
    httpGet:
      path: /api/status
      port: 3000
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

  ## @param backend.startupProbe Backend startup probe configuration
  startupProbe:
    enabled: false
    httpGet:
      path: /api/status
      port: 3000
    initialDelaySeconds: 0
    periodSeconds: 10
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 30

## @section Frontend parameters

frontend:
  ## @param frontend.enabled Enable frontend deployment
  enabled: true

  ## @param frontend.image Frontend image configuration
  image:
    ## @param frontend.image.repository Frontend image repository
    repository: ghcr.io/klask-io/klask-frontend
    ## @param frontend.image.tag Frontend image tag (immutable tags are recommended)
    tag: "v2.1.0"
    ## @param frontend.image.pullPolicy Frontend image pull policy
    pullPolicy: IfNotPresent

  ## @param frontend.service Frontend service configuration
  service:
    ## @param frontend.service.type Frontend service type
    type: ClusterIP
    ## @param frontend.service.port Frontend service port
    port: 8080
    ## @param frontend.service.targetPort Frontend container port
    targetPort: 8080

  ## @param frontend.env Frontend environment variables
  env:
    ## API configuration
    api:
      ## @param frontend.env.api.baseUrl API base URL (leave empty for auto-configuration via ingress)
      ## Example: "https://api.example.com"
      baseUrl: ""

    ## Additional custom variables
    customVars: {}

  ## @param frontend.resources Frontend resource requests and limits
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 256Mi

  ## @param frontend.livenessProbe Frontend liveness probe configuration
  livenessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    successThreshold: 1
    failureThreshold: 3

  ## @param frontend.readinessProbe Frontend readiness probe configuration
  readinessProbe:
    enabled: true
    httpGet:
      path: /health
      port: 8080
    initialDelaySeconds: 5
    periodSeconds: 5
    timeoutSeconds: 3
    successThreshold: 1
    failureThreshold: 3

## @section PostgreSQL parameters

postgresql:
  ## @param postgresql.enabled Enable PostgreSQL deployment
  enabled: true

  ## @param postgresql.auth PostgreSQL authentication configuration
  auth:
    ## @param postgresql.auth.existingSecret Name of existing secret containing PostgreSQL credentials
    ## If specified, postgresPassword, username, password will be ignored
    existingSecret: ""
    ## @param postgresql.auth.postgresPassword PostgreSQL admin password
    postgresPassword: "changeme-postgres-password"
    ## @param postgresql.auth.username PostgreSQL username
    username: "klask"
    ## @param postgresql.auth.password PostgreSQL password
    password: "changeme-klask-password"
    ## @param postgresql.auth.database PostgreSQL database name
    database: "klask"

  ## @param postgresql.external External PostgreSQL configuration (when postgresql.enabled is false)
  external:
    ## @param postgresql.external.host External PostgreSQL host
    host: ""
    ## @param postgresql.external.url External PostgreSQL URL
    ## Example: "postgresql://user:pass@external-db:5432/klask"
    url: ""

  ## @param postgresql.image PostgreSQL image configuration
  image:
    ## @param postgresql.image.repository PostgreSQL image repository
    repository: bitnami/postgresql
    ## @param postgresql.image.tag PostgreSQL image tag
    tag: "16.3.0"

  ## @param postgresql.primary PostgreSQL primary node configuration
  primary:
    ## @param postgresql.primary.persistence PostgreSQL persistence configuration
    persistence:
      enabled: true
      size: 8Gi

    ## @param postgresql.primary.resources PostgreSQL resource requests and limits
    resources:
      limits:
        cpu: 1000m
        memory: 1Gi
      requests:
        cpu: 500m
        memory: 512Mi

## @section Network Policy parameters

networkPolicy:
  ## @param networkPolicy.enabled Enable NetworkPolicy
  enabled: false

  ## @param networkPolicy.ingress Ingress controller configuration for NetworkPolicy
  ingress:
    ## @param networkPolicy.ingress.namespaceSelector Namespace selector for ingress controller
    namespaceSelector:
      kubernetes.io/metadata.name: ingress-nginx
    ## @param networkPolicy.ingress.podSelector Pod selector for ingress controller
    podSelector: {}

  ## @param networkPolicy.backend Backend-specific NetworkPolicy settings
  backend:
    ## @param networkPolicy.backend.allowExternal Allow backend to make external requests
    allowExternal: true

## @section Metrics parameters

metrics:
  ## @param metrics.enabled Enable metrics collection
  enabled: false

  ## @param metrics.serviceMonitor Prometheus ServiceMonitor configuration
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled Enable ServiceMonitor creation
    enabled: false
    ## @param metrics.serviceMonitor.namespace Namespace where ServiceMonitor should be created
    namespace: ""
    ## @param metrics.serviceMonitor.path Metrics endpoint path
    path: /metrics
    ## @param metrics.serviceMonitor.interval Metrics scrape interval
    interval: 30s
    ## @param metrics.serviceMonitor.scrapeTimeout Metrics scrape timeout
    scrapeTimeout: 10s
    ## @param metrics.serviceMonitor.labels Additional labels for ServiceMonitor
    labels: {}
    ## @param metrics.serviceMonitor.relabelings Relabeling rules for ServiceMonitor
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings Metric relabeling rules for ServiceMonitor
    metricRelabelings: []
