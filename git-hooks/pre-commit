#!/bin/bash

# Git pre-commit hook to format Rust code with cargo fmt
# This hook will automatically format Rust code before each commit

echo "🔧 Running pre-commit checks..."

# Check if we're in the right directory
if [ ! -f "klask-rs/Cargo.toml" ]; then
    echo "⚠️  Warning: klask-rs/Cargo.toml not found, skipping cargo fmt"
    exit 0
fi

# Store the current directory
ORIGINAL_DIR=$(pwd)

# Change to the Rust directory
cd klask-rs

echo "📝 Checking Rust code formatting..."

# Check if there are any staged Rust files
if ! git diff --cached --name-only | grep -E '\.(rs)$' >/dev/null; then
    echo "ℹ️  No Rust files staged for commit, skipping formatting"
    cd "$ORIGINAL_DIR"
    exit 0
fi

# Run cargo fmt check
if ! cargo fmt --all -- --check >/dev/null 2>&1; then
    echo "🔨 Code formatting issues detected. Running cargo fmt..."

    # Format the code
    if cargo fmt --all; then
        echo "✅ Code formatted successfully with cargo fmt"

        # Add only the modified staged files back to the commit
        echo "📤 Adding formatted files to staging area..."

        # Get the list of staged Rust files and re-add them
        cd "$ORIGINAL_DIR"
        git diff --cached --name-only | grep -E '\.(rs)$' | while read file; do
            if [ -f "$file" ]; then
                git add "$file"
                echo "   ✓ Added $file"
            fi
        done

        echo "✅ Formatted files added to commit"
    else
        echo "❌ cargo fmt failed"
        cd "$ORIGINAL_DIR"
        exit 1
    fi
else
    echo "✅ Code is already properly formatted"
fi

cd "$ORIGINAL_DIR"
echo "🎉 Pre-commit hook completed successfully"
exit 0